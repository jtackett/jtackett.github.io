;; Analyzed by ClojureScript 0.0-3208
{:use-macros {reaction reagent.ratom}, :excludes #{}, :name simpleexample.ticTacToe, :imports nil, :requires {re-com.core re-com.core, http cljs-http.client, cljs-http.client cljs-http.client, cljs.reader cljs.reader, re-frame.core re-frame.core, reagent.core reagent.core, r reagent.core}, :uses {horizontal-pill-tabs re-com.core, h-box re-com.core, subscribe re-frame.core, input-textarea re-com.core, register-sub re-frame.core, path re-frame.core, progress-bar re-com.core, dispatch-sync re-frame.core, input-text re-com.core, scroller re-com.core, checkbox re-com.core, button re-com.core, box re-com.core, info-button re-com.core, title re-com.core, v-box re-com.core, horizontal-bar-tabs re-com.core, dispatch re-frame.core, read-string cljs.reader, md-icon-button re-com.core, label re-com.core, input-time re-com.core, gap re-com.core, throbber re-com.core, datepicker-dropdown re-com.core, register-handler re-frame.core, hyperlink re-com.core}, :defs {board-full? {:protocol-inline nil, :meta {:arglists (quote ([board])), :doc "Checks to see if the board is full given a vector of maps\n  which is the standard representation for the board in this application", :end-column 18, :end-line 173, :column 7, :line 173, :file "/Users/jtackett/Desktop/Real-estate-investment-app/src/simpleexample/ticTacToe.cljs"}, :name simpleexample.ticTacToe/board-full?, :variadic false, :file "src/simpleexample/ticTacToe.cljs", :end-column 18, :method-params ([board]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 173, :end-line 173, :max-fixed-arity 1, :fn-var true, :arglists (quote ([board])), :doc "Checks to see if the board is full given a vector of maps\n  which is the standard representation for the board in this application", :test true}, initial-state {:meta {:end-column 19, :end-line 55, :column 6, :line 55, :file "/Users/jtackett/Desktop/Real-estate-investment-app/src/simpleexample/ticTacToe.cljs"}, :file "src/simpleexample/ticTacToe.cljs", :line 55, :column 1, :end-line 55, :end-column 19, :test true, :name simpleexample.ticTacToe/initial-state}, greeting {:protocol-inline nil, :meta {:arglists (quote ([message])), :end-column 15, :end-line 366, :column 7, :line 366, :file "/Users/jtackett/Desktop/Real-estate-investment-app/src/simpleexample/ticTacToe.cljs"}, :name simpleexample.ticTacToe/greeting, :variadic false, :file "src/simpleexample/ticTacToe.cljs", :end-column 15, :method-params ([message]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 366, :end-line 366, :max-fixed-arity 1, :fn-var true, :arglists (quote ([message])), :test true}, footer-navigation {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 24, :end-line 376, :column 7, :line 376, :file "/Users/jtackett/Desktop/Real-estate-investment-app/src/simpleexample/ticTacToe.cljs"}, :name simpleexample.ticTacToe/footer-navigation, :variadic false, :file "src/simpleexample/ticTacToe.cljs", :end-column 24, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 376, :end-line 376, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, display-board {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params [(board old?)], :arglists [[board & old?]], :arglists-meta (nil)}, :arglists (quote ([board & old?])), :end-column 20, :end-line 297, :column 7, :line 297, :file "/Users/jtackett/Desktop/Real-estate-investment-app/src/simpleexample/ticTacToe.cljs"}, :name simpleexample.ticTacToe/display-board, :variadic true, :file "src/simpleexample/ticTacToe.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(board old?)], :arglists [[board & old?]], :arglists-meta (nil)}, :method-params [(board old?)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 297, :end-line 297, :max-fixed-arity 1, :fn-var true, :arglists [[board & old?]], :test true}, check-horizontal {:protocol-inline nil, :meta {:arglists (quote ([board])), :private true, :end-column 24, :end-line 138, :column 8, :line 138, :file "/Users/jtackett/Desktop/Real-estate-investment-app/src/simpleexample/ticTacToe.cljs"}, :private true, :name simpleexample.ticTacToe/check-horizontal, :variadic false, :file "src/simpleexample/ticTacToe.cljs", :end-column 24, :method-params ([board]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 138, :end-line 138, :max-fixed-arity 1, :fn-var true, :arglists (quote ([board])), :test true}, current-game {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 19, :end-line 314, :column 7, :line 314, :file "/Users/jtackett/Desktop/Real-estate-investment-app/src/simpleexample/ticTacToe.cljs"}, :name simpleexample.ticTacToe/current-game, :variadic false, :file "src/simpleexample/ticTacToe.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 314, :end-line 314, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, check-winner {:protocol-inline nil, :meta {:arglists (quote ([board])), :doc "A set of methods which require the board as a vector of\n  player symbols or nils", :end-column 19, :end-line 165, :column 7, :line 165, :file "/Users/jtackett/Desktop/Real-estate-investment-app/src/simpleexample/ticTacToe.cljs"}, :name simpleexample.ticTacToe/check-winner, :variadic false, :file "src/simpleexample/ticTacToe.cljs", :end-column 19, :method-params ([board]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 165, :end-line 165, :max-fixed-arity 1, :fn-var true, :arglists (quote ([board])), :doc "A set of methods which require the board as a vector of\n  player symbols or nils", :test true}, next-ai-move {:protocol-inline nil, :meta {:arglists (quote ([board])), :end-column 19, :end-line 183, :column 7, :line 183, :file "/Users/jtackett/Desktop/Real-estate-investment-app/src/simpleexample/ticTacToe.cljs"}, :name simpleexample.ticTacToe/next-ai-move, :variadic false, :file "src/simpleexample/ticTacToe.cljs", :end-column 19, :method-params ([board]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 183, :end-line 183, :max-fixed-arity 1, :fn-var true, :arglists (quote ([board])), :test true}, run {:protocol-inline nil, :meta {:arglists (quote ([])), :export true, :end-column 19, :end-line 443, :column 16, :line 443, :file "/Users/jtackett/Desktop/Real-estate-investment-app/src/simpleexample/ticTacToe.cljs"}, :name simpleexample.ticTacToe/run, :variadic false, :file "src/simpleexample/ticTacToe.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 443, :end-line 443, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, game-history {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 19, :end-line 410, :column 7, :line 410, :file "/Users/jtackett/Desktop/Real-estate-investment-app/src/simpleexample/ticTacToe.cljs"}, :name simpleexample.ticTacToe/game-history, :variadic false, :file "src/simpleexample/ticTacToe.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 410, :end-line 410, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, make-sub {:protocol-inline nil, :meta {:arglists (quote ([k])), :end-column 15, :end-line 239, :column 7, :line 239, :file "/Users/jtackett/Desktop/Real-estate-investment-app/src/simpleexample/ticTacToe.cljs"}, :name simpleexample.ticTacToe/make-sub, :variadic false, :file "src/simpleexample/ticTacToe.cljs", :end-column 15, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 239, :end-line 239, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :test true}, game {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 11, :end-line 404, :column 7, :line 404, :file "/Users/jtackett/Desktop/Real-estate-investment-app/src/simpleexample/ticTacToe.cljs"}, :name simpleexample.ticTacToe/game, :variadic false, :file "src/simpleexample/ticTacToe.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 404, :end-line 404, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, make-new-board {:protocol-inline nil, :meta {:arglists (quote ([])), :doc "A method to make a new board for the beginning of games", :end-column 21, :end-line 40, :column 7, :line 40, :file "/Users/jtackett/Desktop/Real-estate-investment-app/src/simpleexample/ticTacToe.cljs"}, :name simpleexample.ticTacToe/make-new-board, :variadic false, :file "src/simpleexample/ticTacToe.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "A method to make a new board for the beginning of games", :test true}, check-vertical {:protocol-inline nil, :meta {:arglists (quote ([board])), :private true, :end-column 22, :end-line 146, :column 8, :line 146, :file "/Users/jtackett/Desktop/Real-estate-investment-app/src/simpleexample/ticTacToe.cljs"}, :private true, :name simpleexample.ticTacToe/check-vertical, :variadic false, :file "src/simpleexample/ticTacToe.cljs", :end-column 22, :method-params ([board]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 146, :end-line 146, :max-fixed-arity 1, :fn-var true, :arglists (quote ([board])), :test true}, check-diaganal {:protocol-inline nil, :meta {:arglists (quote ([board])), :private true, :end-column 22, :end-line 154, :column 8, :line 154, :file "/Users/jtackett/Desktop/Real-estate-investment-app/src/simpleexample/ticTacToe.cljs"}, :private true, :name simpleexample.ticTacToe/check-diaganal, :variadic false, :file "src/simpleexample/ticTacToe.cljs", :end-column 22, :method-params ([board]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 154, :end-line 154, :max-fixed-arity 1, :fn-var true, :arglists (quote ([board])), :test true}, old-game {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 15, :end-line 346, :column 7, :line 346, :file "/Users/jtackett/Desktop/Real-estate-investment-app/src/simpleexample/ticTacToe.cljs"}, :name simpleexample.ticTacToe/old-game, :variadic false, :file "src/simpleexample/ticTacToe.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 346, :end-line 346, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, make-handler {:protocol-inline nil, :meta {:arglists (quote ([k])), :doc "Helper function to register a simple handler\n  that doesn't require calcualtions", :end-column 19, :end-line 91, :column 7, :line 91, :file "/Users/jtackett/Desktop/Real-estate-investment-app/src/simpleexample/ticTacToe.cljs"}, :name simpleexample.ticTacToe/make-handler, :variadic false, :file "src/simpleexample/ticTacToe.cljs", :end-column 19, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :doc "Helper function to register a simple handler\n  that doesn't require calcualtions", :test true}, undo-button {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 18, :end-line 292, :column 7, :line 292, :file "/Users/jtackett/Desktop/Real-estate-investment-app/src/simpleexample/ticTacToe.cljs"}, :name simpleexample.ticTacToe/undo-button, :variadic false, :file "src/simpleexample/ticTacToe.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 292, :end-line 292, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, split-board-rows {:protocol-inline nil, :meta {:arglists (quote ([board])), :doc "A simple helepr method to split the board into rows.\n  This method could be inline, but it is more readable if\n  I give it a good name in larger functions", :end-column 23, :end-line 46, :column 7, :line 46, :file "/Users/jtackett/Desktop/Real-estate-investment-app/src/simpleexample/ticTacToe.cljs"}, :name simpleexample.ticTacToe/split-board-rows, :variadic false, :file "src/simpleexample/ticTacToe.cljs", :end-column 23, :method-params ([board]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists (quote ([board])), :doc "A simple helepr method to split the board into rows.\n  This method could be inline, but it is more readable if\n  I give it a good name in larger functions", :test true}, check-board {:protocol-inline nil, :meta {:arglists (quote ([board])), :doc "Check to see if the board is full, or if there is winner\n  Returns the old board for things to continue or a fresh board", :end-column 18, :end-line 188, :column 7, :line 188, :file "/Users/jtackett/Desktop/Real-estate-investment-app/src/simpleexample/ticTacToe.cljs"}, :name simpleexample.ticTacToe/check-board, :variadic false, :file "src/simpleexample/ticTacToe.cljs", :end-column 18, :method-params ([board]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 188, :end-line 188, :max-fixed-arity 1, :fn-var true, :arglists (quote ([board])), :doc "Check to see if the board is full, or if there is winner\n  Returns the old board for things to continue or a fresh board", :test true}, cell-button {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params [(cell-contents old?)], :arglists [[cell-contents & old?]], :arglists-meta (nil)}, :arglists (quote ([cell-contents & old?])), :doc "Creates the button for the board", :end-column 18, :end-line 265, :column 7, :line 265, :file "/Users/jtackett/Desktop/Real-estate-investment-app/src/simpleexample/ticTacToe.cljs"}, :name simpleexample.ticTacToe/cell-button, :variadic true, :file "src/simpleexample/ticTacToe.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(cell-contents old?)], :arglists [[cell-contents & old?]], :arglists-meta (nil)}, :method-params [(cell-contents old?)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 265, :end-line 265, :max-fixed-arity 1, :fn-var true, :arglists [[cell-contents & old?]], :doc "Creates the button for the board", :test true}, avoid-nil {:protocol-inline nil, :meta {:arglists (quote ([s])), :end-column 16, :end-line 37, :column 7, :line 37, :file "/Users/jtackett/Desktop/Real-estate-investment-app/src/simpleexample/ticTacToe.cljs"}, :name simpleexample.ticTacToe/avoid-nil, :variadic false, :file "src/simpleexample/ticTacToe.cljs", :end-column 16, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :test true}, simple-example {:protocol-inline nil, :meta {:arglists (quote ([])), :doc "This is the framework for the app.\n  The condp along with the nav-panel key in the @db\n  provide a nice navigation/routing framework\n  while building within a singlepage application", :end-column 21, :end-line 417, :column 7, :line 417, :file "/Users/jtackett/Desktop/Real-estate-investment-app/src/simpleexample/ticTacToe.cljs"}, :name simpleexample.ticTacToe/simple-example, :variadic false, :file "src/simpleexample/ticTacToe.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 417, :end-line 417, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "This is the framework for the app.\n  The condp along with the nav-panel key in the @db\n  provide a nice navigation/routing framework\n  while building within a singlepage application", :test true}, complete-move {:protocol-inline nil, :meta {:arglists (quote ([board-position players-turn game-board])), :doc "Handles the logic for completing a move and switching players", :end-column 20, :end-line 207, :column 7, :line 207, :file "/Users/jtackett/Desktop/Real-estate-investment-app/src/simpleexample/ticTacToe.cljs"}, :name simpleexample.ticTacToe/complete-move, :variadic false, :file "src/simpleexample/ticTacToe.cljs", :end-column 20, :method-params ([board-position players-turn game-board]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 207, :end-line 207, :max-fixed-arity 3, :fn-var true, :arglists (quote ([board-position players-turn game-board])), :doc "Handles the logic for completing a move and switching players", :test true}}, :require-macros {reagent.ratom reagent.ratom}, :cljs.analyzer/constants {:order [:position :game-board :whos-turn :nav-panel :old-games :undo-position :ai? :current-game :initialize :undo :symbol :switch-player :save :default :move :progress :button.trim.nav :on-click :style :background-color :color :height :children :ai :margin-left :margin-right :label :underline? :font-size :gap :level :level1 :model :width :margin-top :on-change :margin-bottom :max-width :div :bottom :min-width], :seen #{:min-width :current-game :whos-turn :children :color :bottom :nav-panel :font-size :default :symbol :ai :margin-left :old-games :background-color :margin-top :width :move :underline? :max-width :save :on-click :style :level :div :initialize :undo :label :button.trim.nav :gap :undo-position :position :ai? :margin-right :switch-player :on-change :progress :game-board :margin-bottom :level1 :height :model}}, :doc nil}